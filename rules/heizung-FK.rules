import java.math.BigDecimal
import java.util.Locale

val String filename = "heizung-FK.rules"

// How to Duplicate:
// Search and replace "FK_" --> "WZ_" 

rule "FK_Heizung set heating from sitemap preset element"
when
  Item FK_Heizung_Preset received command
then {
	logInfo(filename, "Schnellauswahl (Sitemap -> Homematic)")
	switch (receivedCommand){
		case 0: FK_Heizung_Lowering.sendCommand(ON)
		case 1: FK_Heizung_Comfort.sendCommand(ON)
	}
	createTimer(now.plusSeconds(1)) [|
		FK_Heizung_Preset.postUpdate(-1)
	]
}
end

rule "FK_Heizung set mode from sitemap select element"
when
  Item FK_Heizung_SetMode received command
then {
	logInfo(filename, "Modus (Sitemap -> Homematic)")
	switch (receivedCommand){
		case 0: FK_Heizung_Auto.sendCommand(ON)
		case 1: FK_Heizung_Manu.sendCommand(FK_Heizung_SetTemp.state as DecimalType)
		case 3: FK_Heizung_BoostMode.sendCommand(ON)
		case 4: FK_Heizung_SetMode.postUpdate(-1)
	}
}
end

rule "FK_Heizung update sitemap with window mode"
when
  Item FK_Fenster_State received update
then {
	createTimer(now.plusSeconds(15)) [|
		//logInfo(filename, "Fenster-Modus <" + FK_Fenster_State.state + "><" + FK_Heizung_SetTemp.state + ">")
		if (FK_Fenster_State.state == OPEN && FK_Heizung_SetTemp.state == 12.0) {
			//logInfo(filename, "Fenster-Modus aktiviert")
			FK_Heizung_SetMode.postUpdate(4)
		} else if (FK_Fenster_State.state == CLOSED && FK_Heizung_SetTemp.state != 12.0) {
			//logInfo(filename, "Fenster-Modus deaktiviert")
			FK_Heizung_SetMode.postUpdate(FK_Heizung_Mode.state)
		} else {
			logError(filename, "Fenster-Modus nicht eindeutig")
			FK_Heizung_SetMode.postUpdate(FK_Heizung_Mode.state)
		}
	]	
}	
end

rule "FK_Heizung update sitemap with heating mode"
when
  Item FK_Heizung_Mode received update
then {
	//logInfo(filename, "Modus (Homematic -> Sitemap)")
	// Fenster-Modus pruefen: Wenn Auswahl auf "F" und update auf "A", nichts tun
	if (FK_Heizung_SetMode.state == 4 && FK_Heizung_Mode.state == 0) {
		//logInfo(filename, "Modus (Homematic -> Sitemap) kein Update da Fenster-Modus")
	} else {
		FK_Heizung_SetMode.postUpdate(FK_Heizung_Mode.state)
	}
}	
end

rule "FK_Heizung create summary"
when
	Item FK_Heizung_SetTemp changed or
	Item FK_Heizung_ActTemp changed or
	Item FK_Heizung_Valve changed or
	Item FK_Heizung_SetMode changed
then {
	if ((FK_Heizung_SetTemp.state instanceof DecimalType) && (FK_Heizung_ActTemp.state instanceof DecimalType)) {	
		val BigDecimal setTemp = (FK_Heizung_SetTemp.state as DecimalType).toBigDecimal
		val BigDecimal actTemp = (FK_Heizung_ActTemp.state as DecimalType).toBigDecimal
		val mode = if (FK_Heizung_SetMode.state == 1) "âš™" else if (FK_Heizung_SetMode.state == 2) "ðŸ”¥" else ""
		
		if (FK_Heizung_Valve.state > 60) {
			FK_Heizung_Summary.postUpdate(String::format("( âŸ° %.1f Â°C) %s %.1f Â°C", setTemp, mode, actTemp))
		} else if (FK_Heizung_Valve.state > 40) {
			FK_Heizung_Summary.postUpdate(String::format("( â¤Š %.1f Â°C) %s %.1f Â°C", setTemp, mode, actTemp))
		} else if (FK_Heizung_Valve.state > 20) {
			FK_Heizung_Summary.postUpdate(String::format("( â‡ˆ %.1f Â°C) %s %.1f Â°C", setTemp, mode, actTemp))
		} else if (FK_Heizung_Valve.state > 0) {
			FK_Heizung_Summary.postUpdate(String::format("( â†‘ %.1f Â°C) %s %.1f Â°C", setTemp, mode, actTemp))
		} else {
			if (FK_Heizung_SetMode.state == 1) {
				FK_Heizung_Summary.postUpdate(String::format("%s %.1f Â°C", mode, actTemp))
			} else if (FK_Heizung_SetMode.state == 4) {
				FK_Heizung_Summary.postUpdate(String::format("( â†» Fenster offen)  %.1f Â°C", actTemp))
			} else {
				FK_Heizung_Summary.postUpdate(String::format("%.1f Â°C", actTemp))
			}
		}
	} else {
		FK_Heizung_Summary.postUpdate("(unbekannt)")
	}
}
end








