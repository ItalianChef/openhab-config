
val String filename = "nurzen100.rules"

// Timer f√ºr das automatische Ausschalten
var Timer hold_timer = null
var int irene_timer_seconds = 60

rule "Sonoff Touch Vorbau verschiedene Tastarten"
when
    Item N100_Hoflicht_Vorbau_Button received update
then
    switch (N100_Hoflicht_Vorbau_Button.state) {
        case "OFF" : {
            //N100_Hoflicht_Vorbau.sendCommand(OFF)
            N100_Hoflicht_Scheune.sendCommand(OFF)
            N100_Hoflicht_Pferdestall.sendCommand(OFF)
            //N100_Hoflicht_Irene_Status.postUpdate(OFF)
         }
        case "ON" : {
            //N100_Hoflicht_Vorbau.sendCommand(ON)
        }
        case "TOGGLE" : {
            //N100_Hoflicht_Vorbau.sendCommand(ON)
            N100_Hoflicht_Irene_Relay.sendCommand(ON)
            createTimer(now.plusSeconds(irene_timer_seconds)) [ |
                N100_Hoflicht_Vorbau.sendCommand(OFF)
                //N100_Hoflicht_Irene_Status.postUpdate(OFF)
            ]
        }
        case "HOLD" : {
            N100_Hoflicht_Vorbau.sendCommand(ON)
            N100_Hoflicht_Scheune.sendCommand(ON)
            N100_Hoflicht_Pferdestall.sendCommand(ON)
        }
    }
end

rule "Sonoff 100 Vorbau mit Irene einschalten"
when
    Item N100_Hoflicht_Irene_Status changed
then
    if (N100_Hoflicht_Irene_Status.state == ON ) {
        if (N100_Hoflicht_Vorbau.state != ON) {
            N100_Hoflicht_Vorbau.sendCommand(ON)
            createTimer(now.plusSeconds(irene_timer_seconds)) [ |
                N100_Hoflicht_Vorbau.sendCommand(OFF)
                //N100_Hoflicht_Irene_Status.postUpdate(OFF)
            ]
        }
    }
    N100_Hoflicht_Irene.postUpdate(N100_Hoflicht_Irene_Status.state)
end

rule "Sonoff Touch virtuelles Item updaten"
when
    Item N100_Hoflicht_Irene received command
then
    if (receivedCommand == ON ) N100_Hoflicht_Irene_Relay.sendCommand(ON)
end
