
val String filename = "sonos.rules"

val int shorten_length = 30

rule "Sonos init"
when
    System started
then
    createTimer(now.plusSeconds(175)) [|
        if (Sonos_Summary.state == NULL || Sonos_Summary.state == "") Sonos_Summary.postUpdate("(unbekannt) ⁉")
    ]
end

rule "Sonos Summary update"
when
    Item FK_Sonos_CurrentArtist changed or
    Item FK_Sonos_CurrentTitle changed or
    Item FK_Sonos_State changed or
    Item FK_Sonos_Volume changed
then
    //logInfo(filename, "--> Sonos Summary update")
    if (FK_Sonos_CurrentArtist.state == NULL || FK_Sonos_CurrentTitle.state == NULL || FK_Sonos_State.state == NULL) return

    val String artist = (FK_Sonos_CurrentArtist.state as StringType).toString
    val String title = (FK_Sonos_CurrentTitle.state as StringType).toString
    val String status = if (FK_Sonos_State.state == "PLAYING") "⏯" else if (FK_Sonos_State.state == "PAUSED_PLAYBACK") "⏸" else " "
    val String volume = ((Sonos_Volumes.state as Number).intValue).toString
    var String summary = artist + ": " + title
    if (summary.length > shorten_length) {
        summary = summary.substring(0, shorten_length).trim + "…"
    }
    summary = String::format("%s - 🔊 %s%% - %s", summary, volume, status)
    //logInfo(filename, "--> Sonos Summary: " + summary)
    
    Sonos_Summary.postUpdate(summary)
end