
val String filename = "heizung-WZ.rules"

val Number tempHigher = 23.0
val Number tempComfort = 21.0
val Number tempMid = 19.0
val Number tempLower = 17.0
val Number tempChill = 15.0
val Number tempAway = 15.0
val Number tempAwayLonger = 13.0
val Number tempOff = 4.5

// How to Duplicate:
// Search and replace "WZ_" --> "WZ_" 

rule "WZ_Heizung Auswertung Schnellauswahl (Sitemap)"
when
  Item WZ_Heizung_Preset received command
then {
	logInfo(filename, "Auswertung Schnellauswahl (Sitemap)")
	switch (receivedCommand){
		case 0: WZ_Heizung_Manu.sendCommand(tempLower)
		case 1: WZ_Heizung_Manu.sendCommand(tempComfort)
		case 2: WZ_Heizung_Manu.sendCommand(tempHigher)
	}
	WZ_Heizung_Preset.postUpdate(-1)
}
end

/*
rule "WZ_Heizung switch heater mode (Auto, Manu, Boost)"
when
  Item WZ_Heizung_SetMode received command
then {
	logInfo(filename, "Modus (Sitemap -> Homematic)")
	switch (receivedCommand){
		case "AUTO-MODE": WZ_Heizung_Auto.sendCommand(ON)
		case "MANU-MODE": WZ_Heizung_Manu.sendCommand(WZ_Heizung_SetTemp.state as Number)
		case "BOOST-MODE": WZ_Heizung_BoostMode.sendCommand(ON)
	}
}
end
*/
/*
rule "WZ_Heizung Fensterabsenkung erkennen"
when
  Item WZ_Fenster_State received update
then {
	createTimer(now.plusSeconds(15)) [|
		logInfo(filename, "Fenster-Modus <" + WZ_Fenster_State.state + "><" + WZ_Heizung_SetTemp.state + ">")
		if (WZ_Fenster_State.state == OPEN && WZ_Heizung_SetTemp.state == 12.0) {
			logInfo(filename, "Fenster-Modus aktiviert")
			WZ_Heizung_WindowMode.postUpdate(ON)
		} else if (WZ_Fenster_State.state == CLOSED && WZ_Heizung_SetTemp.state != 12.0) {
			logInfo(filename, "Fenster-Modus deaktiviert")
			WZ_Heizung_WindowMode.postUpdate(OFF)
		} else {
			logError(filename, "Fenster-Modus nicht eindeutig")
			WZ_Heizung_WindowMode.postUpdate(OFF)
		}
	]	
}	
end
*/

rule "WZ_Heizung create summary"
when
	Item WZ_Heizung_SetTemp changed or
	Item WZ_Heizung_ActTemp changed or
	Item WZ_Heizung_Valve changed or
	Item WZ_Heizung_Mode changed or
	Item WZ_Heizung_WindowMode changed
then {
	if ((WZ_Heizung_SetTemp.state instanceof Number) && (WZ_Heizung_ActTemp.state instanceof Number)) {
		val setTemp = (WZ_Heizung_SetTemp.state as DecimalType).floatValue
		val actTemp = (WZ_Heizung_ActTemp.state as DecimalType).floatValue
		val mode = if (WZ_Heizung_Mode.state == "AUTO-MODE") "âš™" else if (WZ_Heizung_Mode.state == "BOOST-MODE") "ðŸ”¥" else ""
		
		if (WZ_Heizung_Valve.state > 60) {
			WZ_Heizung_Summary.postUpdate(String::format("( âŸ° %.1f Â°C) %s %.1f Â°C", setTemp, mode, actTemp))
		} else if (WZ_Heizung_Valve.state > 40) {
			WZ_Heizung_Summary.postUpdate(String::format("( â¤Š %.1f Â°C) %s %.1f Â°C", setTemp, mode, actTemp))
		} else if (WZ_Heizung_Valve.state > 20) {
			WZ_Heizung_Summary.postUpdate(String::format("( â‡ˆ %.1f Â°C) %s %.1f Â°C", setTemp, mode, actTemp))
		} else if (WZ_Heizung_Valve.state > 0) {
			WZ_Heizung_Summary.postUpdate(String::format("( â†‘ %.1f Â°C) %s %.1f Â°C", setTemp, mode, actTemp))
		} else {
			if (WZ_Heizung_Mode.state == "MANU-MODE") {
				WZ_Heizung_Summary.postUpdate(String::format("%.1f Â°C", actTemp))
			} else if (WZ_Heizung_WindowMode.state == ON) {
				WZ_Heizung_Summary.postUpdate(String::format("( â†» Fenster offen)  %.1f Â°C", actTemp))
			} else {
				WZ_Heizung_Summary.postUpdate(String::format("%s %.1f Â°C", mode, actTemp))
			}
		}
	} else {
		WZ_Heizung_Summary.postUpdate("(unbekannt)")
	}
}
end








