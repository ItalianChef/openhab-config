import org.openhab.core.library.types.*
//import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import org.joda.time.*

rule "Kodi init"
when
	System started
then {
	if (KodiTitleShow.state == Uninitialized) KodiTitleShow.postUpdate("")
	if (KodiTitle.state == Uninitialized) KodiTitle.postUpdate("")
	if (KodiPlayerState.state == Uninitialized) KodiPlayerState.postUpdate("Stop")
	if (KodiSystemState.state == Uninitialized) KodiSystemState.postUpdate(OFF)
	if (KodiSummary.state == Uninitialized || KodiSummary.state == "") KodiSummary.postUpdate("⁉ (unbekannt)")
}
end

rule "Kodi Summary update"
when
	Item KodiSystemState changed or 
	Item KodiPlayerState changed or 
	Item KodiTitleShow changed or 
	Item KodiTitle changed
then
	//logInfo("RULE", "Kodi update")
	val status = if (KodiPlayerState.state == "Play") "⏯" else if (KodiPlayerState.state == "Pause") "⏸" else "⏹"
	val title = (KodiTitle.state as StringType).toString
	val show = (KodiTitleShow.state as StringType).toString
	
	var String summary
	if (KodiSystemState.state == OFF) summary = "✖ (nicht aktiv)"
	else if (KodiPlayerState.state == "Stop") summary = String::format("%s (inaktiv)", status, title)
	else if (KodiTitleShow.state == "") summary = String::format("%s %s", status, title)
	else summary = String::format("%s %s: %s", status, show, title)
	
	KodiSummary.postUpdate(summary)
end


rule "Kodi reset PlayPause controls"
when
	Item KodiPlayPause received command
then
	//logInfo("RULE", "Kodi reset PlayPause controls")
	KodiPlayPause.postUpdate(OFF) 
end




















