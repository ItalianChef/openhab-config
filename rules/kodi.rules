
rule "Kodi init"
when
    System started
then {
    createTimer(now.plusSeconds(175)) [|
        //if (KodiTitleShow.state == NULL) KodiTitleShow.postUpdate("")
        //if (KodiTitle.state == NULL) KodiTitle.postUpdate("")
        //if (KodiPlayerState.state == NULL) KodiPlayerState.postUpdate("Stop")
        if (KodiSystemState.state == NULL) KodiSystemState.postUpdate(OFF)
        if (KodiSummary.state == NULL || KodiSummary.state == "") KodiSummary.postUpdate("(unbekannt) ⁉")
    ]
}
end

rule "Kodi Summary update"
when
    Item KodiSystemState changed or
    Item KodiPlayerState changed or
    Item KodiTitle changed
then {
    logInfo("RULE", "--> Kodi Summary update")
    val status = if (KodiPlayerState.state == "Play") "⏯" else if (KodiPlayerState.state == "Pause") "⏸" else "⏹"
    val title = (KodiTitle.state as StringType).toString
    val show = (KodiTitleShow.state as StringType).toString

    var summary = ""
    if (KodiSystemState.state == OFF) summary = "nicht aktiv ✘"
    else if (KodiPlayerState.state == "Stop") summary = "inaktiv ⏹"
    else if (KodiTitleShow.state == "") summary = String::format("%s %s", title, status)
    else summary = String::format("%s: %s %s", show, title, status)

    KodiSummary.postUpdate(summary)
}
end


rule "Kodi reset PlayPause controls"
when
    Item KodiPlayPause received command
then {
    //logInfo("RULE", "Kodi reset PlayPause controls")
    KodiPlayPause.postUpdate(OFF)
}
end

rule "Kodi Notification triggered"
when
    Item KodiNotificationId received command
then {
    //logInfo("RULE", "Kodi Notification triggered")
    var String msg = "a"
    switch (receivedCommand) {
        case 1: msg = "Hello! :)"
        case 2: msg = "Stop being lazy!"
        case 3: msg = "Go to bed! :P"
        case 4: msg = "I love this show!!!"
        case 5: msg = "Meh."
        case 6: msg = "Garbage! :O"
    }

    KodiNotificationText.sendCommand(msg)
    createTimer(now.plusSeconds(3)) [|
        //KodiNotificationText.sendCommand("")
        KodiNotificationId.postUpdate(-1)
    ]
}
end

// vim: syntax=Xtend syntax=openhab
